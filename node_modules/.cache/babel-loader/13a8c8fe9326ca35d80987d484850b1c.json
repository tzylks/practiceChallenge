{"ast":null,"code":"import sampleData from './mock_data';\nimport { createSelector } from 'reselect';\nimport memoize from 'lodash.memoize';\nconst initialState = { ...sampleData\n};\nexport const MERGE_SESSION = 'app/MERGE_SESSION';\nexport const ADD_CONTRIBUTION = 'app/ADD_CONTRIBUTION'; //- Redux\n\nexport const app = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case MERGE_SESSION:\n      {\n        const session = { ...state.session,\n          ...payload\n        };\n        return { ...state,\n          session\n        };\n      }\n\n    case ADD_CONTRIBUTION:\n      {\n        const {\n          user\n        } = state.session;\n        const contributions = state.contributions;\n        const amount = formatAmount(payload.amount);\n        const balance = user.balance - amount;\n        const date = new Date().toJSON(); // Construct new contribution\n\n        const contribution = {\n          id: contributions.length + 1,\n          amount,\n          campaignId: payload.campaignId,\n          date,\n          message: payload.message,\n          userId: user.id\n        }; // Update user balance (deep copy)\n\n        const session = Object.assign({}, state.session, {\n          user: { ...user,\n            balance\n          }\n        });\n        return { ...state,\n          session: { ...state.session,\n            ...session\n          },\n          contributions: [...contributions, contribution]\n        };\n      }\n\n    default:\n      {\n        return state;\n      }\n  }\n}; //- Utility Methods\n\nfunction formatAmount(amount) {\n  return parseFloat(Number(amount).toFixed(2));\n}\n\nfunction filterContributions(contributions, campaignId) {\n  return contributions.reduce((array, contribution) => {\n    if (contribution.campaignId !== campaignId) {\n      return array;\n    }\n\n    return [...array, contribution];\n  }, []);\n}\n\nfunction calculateContributionsTotal(contributions) {\n  return contributions.reduce((total, {\n    amount\n  }) => {\n    return total + amount;\n  }, 0);\n} //- Actions\n\n\nexport const selectCampaignById = campaignId => {\n  return {\n    type: MERGE_SESSION,\n    payload: {\n      selectedCampaignId: campaignId\n    }\n  };\n};\nexport const addContribution = (amount, message, campaignId) => {\n  return {\n    type: ADD_CONTRIBUTION,\n    payload: {\n      amount,\n      message,\n      campaignId\n    }\n  };\n}; //- Selectors\n// Session\n\nexport const getSelectedCampaignId = state => {\n  return state.app.session.selectedCampaignId;\n};\nexport const getSessionUser = state => {\n  return state.app.session.user;\n}; // Contributions\n\nconst getContributions = state => {\n  return state.app.contributions;\n};\n\nexport const makeGetCampaignContributionsTotal = createSelector(getContributions, contributions => memoize(() => {\n  console.log(\"Reselect.getCampaignContributionsTotal\");\n  return calculateContributionsTotal(contributions);\n}));\nexport const makeGetCampaignContributionsCount = createSelector(getContributions, contributions => memoize(() => {\n  console.log(\"Reselect.getCampaignContributionsCount\");\n  return contributions.length;\n}));\nexport const makeGetCampaignContributionsSorted = createSelector(getContributions, contributions => memoize(campaignId => {\n  console.log(\"Reselect.getCampaignContributionsSorted\", campaignId);\n  return filterContributions(contributions, campaignId).sort((a, b) => {\n    return b.date > a.date ? 1 : -1;\n  });\n}));\nexport const makeGetCampaignContributionsTotalById = createSelector(getContributions, contributions => memoize(campaignId => {\n  console.log(\"Reselect.getCampaignContributionsTotalById\", campaignId);\n  return filterContributions(contributions, campaignId).reduce((total, {\n    amount\n  }) => {\n    return total + amount;\n  }, 0);\n})); // Campaigns\n\nconst getCampaigns = state => {\n  return state.app.campaigns;\n};\n\nexport const makeGetCampaignsCount = createSelector(getCampaigns, campaigns => memoize(() => {\n  console.log(\"Reselect.getCampaignsCount\");\n  return campaigns.length;\n}));\nexport const makeGetCampaignsSorted = createSelector(getCampaigns, getContributions, (campaigns, contributions) => memoize(() => {\n  console.log(\"Reselect.getCampaignsSorted\");\n  return campaigns.reduce((array, campaign) => {\n    const filteredContributions = filterContributions(contributions, campaign.id);\n    const total = calculateContributionsTotal(filteredContributions);\n    const progress = total / campaign.goal;\n    return [...array, { ...campaign,\n      progress\n    }];\n  }, []).sort((a, b) => {\n    return b.progress > a.progress ? 1 : -1;\n  });\n}));\nexport const makeGetCampaignById = createSelector(getCampaigns, campaigns => memoize(campaignId => {\n  console.log(\"Reselect.getCampaignById\", campaignId);\n  return campaigns.find(campaign => campaign.id === campaignId);\n})); // Users\n\nconst getUsers = state => {\n  return state.app.users;\n};\n\nexport const makeGetUsersCount = createSelector(getUsers, users => memoize(() => {\n  console.log(\"Reselect.getUsersCount\");\n  return users.length;\n}));\nexport const makeGetUserById = createSelector(getUsers, users => memoize(userId => {\n  console.log(\"Reselect.getUserById\", userId);\n  return users.find(user => user.id === userId);\n}));","map":{"version":3,"sources":["/Users/trevorzylks/Development/code/module5/practiceInterview/src/modules/index.js"],"names":["sampleData","createSelector","memoize","initialState","MERGE_SESSION","ADD_CONTRIBUTION","app","state","action","type","payload","session","user","contributions","amount","formatAmount","balance","date","Date","toJSON","contribution","id","length","campaignId","message","userId","Object","assign","parseFloat","Number","toFixed","filterContributions","reduce","array","calculateContributionsTotal","total","selectCampaignById","selectedCampaignId","addContribution","getSelectedCampaignId","getSessionUser","getContributions","makeGetCampaignContributionsTotal","console","log","makeGetCampaignContributionsCount","makeGetCampaignContributionsSorted","sort","a","b","makeGetCampaignContributionsTotalById","getCampaigns","campaigns","makeGetCampaignsCount","makeGetCampaignsSorted","campaign","filteredContributions","progress","goal","makeGetCampaignById","find","getUsers","users","makeGetUsersCount","makeGetUserById"],"mappings":"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","sourcesContent":["import sampleData from './mock_data'\n\nimport { createSelector } from 'reselect'\nimport memoize from 'lodash.memoize'\n\nconst initialState = { ...sampleData }\n\nexport const MERGE_SESSION = 'app/MERGE_SESSION'\nexport const ADD_CONTRIBUTION = 'app/ADD_CONTRIBUTION'\n\n//- Redux\n\nexport const app = (state = initialState, action) => {\n\tconst { type, payload } = action\n\n\tswitch (type) {\n\t\tcase MERGE_SESSION: {\n\t\t\tconst session = { ...state.session, ...payload }\n\n\t\t\treturn { ...state, session }\n\t\t}\n\n\t\tcase ADD_CONTRIBUTION: {\n\t\t\tconst { user } = state.session\n\t\t\tconst contributions = state.contributions\n\n\t\t\tconst amount = formatAmount(payload.amount)\n\t\t\tconst balance = user.balance - amount\n\t\t\tconst date = (new Date()).toJSON()\n\n\t\t\t// Construct new contribution\n\t\t\tconst contribution = {\n\t\t\t\tid:\tcontributions.length + 1,\n\t\t\t\tamount,\n\t\t\t\tcampaignId: payload.campaignId,\n\t\t\t\tdate,\n\t\t\t\tmessage: payload.message,\n\t\t\t\tuserId: user.id\n\t\t\t}\n\n\t\t\t// Update user balance (deep copy)\n\t\t\tconst session = Object.assign({}, state.session, {user: {...user, balance}})\n\n\t\t\treturn {...state, session: {...state.session, ...session}, contributions: [...contributions, contribution]}\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn state\n\t\t}\n\t}\n}\n\n//- Utility Methods\n\nfunction formatAmount(amount) {\n\treturn parseFloat(Number(amount).toFixed(2))\n}\n\nfunction filterContributions(contributions, campaignId){\n\treturn contributions.reduce((array, contribution) => {\n\t\tif (contribution.campaignId !== campaignId) {\n\t\t\treturn array\n\t\t}\n\n\t\treturn [...array, contribution]\n\t}, [])\n}\n\nfunction calculateContributionsTotal(contributions){\n\treturn contributions.reduce((total, { amount }) => {\n\t\treturn (total + amount)\n\t}, 0)\n}\n\n//- Actions\n\nexport const selectCampaignById = campaignId => {\n\treturn {\n\t\ttype: MERGE_SESSION,\n\t\tpayload: { selectedCampaignId: campaignId }\n\t}\n}\n\nexport const addContribution = (amount, message, campaignId) => {\n\treturn {\n\t\ttype: ADD_CONTRIBUTION,\n\t\tpayload: {\n\t\t\tamount, message, campaignId\n\t\t}\n\t}\n}\n\n//- Selectors\n\n// Session\nexport const getSelectedCampaignId = state => {\n\treturn state.app.session.selectedCampaignId\n}\n\nexport const getSessionUser = state => {\n\treturn state.app.session.user\n}\n\n// Contributions\nconst getContributions = state => {\n\treturn state.app.contributions\n}\n\nexport const makeGetCampaignContributionsTotal = createSelector(\n\tgetContributions,\n\tcontributions => memoize(\n\t\t() => {\n\t\t\tconsole.log(\"Reselect.getCampaignContributionsTotal\")\n\t\t\treturn calculateContributionsTotal(contributions)\n\t\t}\n\t)\n)\n\nexport const makeGetCampaignContributionsCount = createSelector(\n\tgetContributions,\n\tcontributions => memoize(\n\t\t() => {\n\t\t\tconsole.log(\"Reselect.getCampaignContributionsCount\")\n\t\t\treturn contributions.length\n\t\t}\n\t)\n)\n\nexport const makeGetCampaignContributionsSorted = createSelector(\n\tgetContributions,\n\tcontributions => memoize(\n\t\tcampaignId => {\n\t\t\tconsole.log(\"Reselect.getCampaignContributionsSorted\", campaignId)\n\t\t\treturn filterContributions(contributions, campaignId).sort((a, b) => {\n\t\t\t\treturn (b.date > a.date) ? 1 : -1\n\t\t\t})\n\t\t}\n\t)\n)\n\nexport const makeGetCampaignContributionsTotalById = createSelector(\n\tgetContributions,\n\tcontributions => memoize(\n\t\tcampaignId => {\n\t\t\tconsole.log(\"Reselect.getCampaignContributionsTotalById\", campaignId)\n\t\t\treturn filterContributions(contributions, campaignId).reduce((total, { amount }) => {\n\t\t\t\treturn (total + amount)\n\t\t\t}, 0)\n\t\t}\n\t)\n)\n\n// Campaigns\nconst getCampaigns = state => {\n\treturn state.app.campaigns\n}\n\nexport const makeGetCampaignsCount = createSelector(\n\tgetCampaigns,\n\tcampaigns => memoize(\n\t\t() => {\n\t\t\tconsole.log(\"Reselect.getCampaignsCount\")\n\t\t\treturn campaigns.length\n\t\t}\n\t)\n)\n\nexport const makeGetCampaignsSorted = createSelector(\n\tgetCampaigns,\n\tgetContributions,\n\t(campaigns, contributions) => memoize(\n\t\t() => {\n\t\t\tconsole.log(\"Reselect.getCampaignsSorted\")\n\t\t\treturn campaigns.reduce((array, campaign) => {\n\t\t\t\tconst filteredContributions = filterContributions(contributions, campaign.id)\n\t\t\t\tconst total = calculateContributionsTotal(filteredContributions)\n\t\t\t\tconst progress = total / campaign.goal\n\t\t\t\treturn [...array, {...campaign, progress}]\n\t\t\t}, [])\n\t\t\t.sort((a, b) => {\n\t\t\t\treturn (b.progress > a.progress) ? 1 : -1\n\t\t\t})\n\t\t}\n\t)\n)\n\nexport const makeGetCampaignById = createSelector(\n\tgetCampaigns,\n\tcampaigns => memoize(\n\t\tcampaignId => {\n\t\t\tconsole.log(\"Reselect.getCampaignById\", campaignId)\n\t\t\treturn campaigns.find(campaign => campaign.id === campaignId)\n\t\t}\n\t)\n)\n\n// Users\nconst getUsers = state => {\n\treturn state.app.users\n}\n\nexport const makeGetUsersCount = createSelector(\n\tgetUsers,\n\tusers => memoize(\n\t\t() => {\n\t\t\tconsole.log(\"Reselect.getUsersCount\")\n\t\t\treturn users.length\n\t\t}\n\t)\n)\n\nexport const makeGetUserById = createSelector(\n\tgetUsers,\n\tusers => memoize(\n\t\tuserId => {\n\t\t\tconsole.log(\"Reselect.getUserById\", userId)\n\t\t\treturn users.find(user => user.id === userId)\n\t\t}\n\t)\n)\n"]},"metadata":{},"sourceType":"module"}